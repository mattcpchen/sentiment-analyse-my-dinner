"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireDefault(require("react"));

var _lodash = _interopRequireDefault(require("lodash.upperfirst"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var icons = _interopRequireWildcard(require("./index"));

var Icon = function Icon(_ref) {
  var name = _ref.name,
      title = _ref.title,
      desc = _ref.desc,
      titleId = _ref.titleId,
      descId = _ref.descId,
      props = (0, _objectWithoutProperties2["default"])(_ref, ["name", "title", "desc", "titleId", "descId"]);
  var Component = icons[name] || icons[(0, _lodash["default"])(name)];
  if (!Component) return false;
  /**
   *  To support older browsers, make sure 'titleId' is passed along with 'title' props and
   * 'descId' with 'desc' props
   * Also, <desc> element should be followed by a <title> tag for <svg> elements
   * */

  if (!!title) {
    var ariaLabelledBy = '';
    props['aria-hidden'] = 'false';

    if (!!titleId) {
      ariaLabelledBy = titleId;
    }

    if (!!desc && !!descId) {
      ariaLabelledBy = "".concat(ariaLabelledBy, " ").concat(descId);
    }

    if (!!ariaLabelledBy) {
      props['aria-labelledby'] = ariaLabelledBy;
    }
  }

  return _react["default"].createElement(Component, (0, _extends2["default"])({
    title: title,
    desc: desc,
    titleId: titleId,
    descId: descId
  }, props));
};

Icon.defaultProps = {
  size: 24,
  'aria-hidden': 'true',
  focusable: 'false'
};
Icon.displayName = 'Icon';
Icon.propTypes = {
  name: function name(props, key, componentName) {
    var name = props[key];

    if (!icons[name] && !icons[(0, _lodash["default"])(name)]) {
      return new Error("Unknown name prop `".concat(name, "` supplied to `").concat(componentName, "`"));
    } else if (!icons[name]) {
      return new Error("Icon name prop should be uppercase.\n" + "Use `".concat((0, _lodash["default"])(name), "` instead of ").concat(name, "."));
    }
  },
  title: function title(props, propName, componentName) {
    if (typeof props[propName] !== 'string') {
      return new Error("'title' prop supplied to '".concat(componentName, "' should be a string"));
    } else if (!!props[propName] && !props['titleId']) {
      return new Error("'titleId' prop should be passed along with 'title' prop to '".concat(componentName, "'"));
    }
  },
  desc: function desc(props, propName, componentName) {
    if (typeof props[propName] !== 'string') {
      return new Error("'desc' prop supplied to '".concat(componentName, "' should be a string"));
    } else if (!!props[propName] && !props['title']) {
      return new Error("'title' prop should be passed along with 'desc' prop to '".concat(componentName, "'"));
    } else if (!!props[propName] && !props['descId']) {
      return new Error("'descId' prop should be passed along with 'desc' prop to '".concat(componentName, "'"));
    }
  },
  titleId: _propTypes["default"].string,
  descId: _propTypes["default"].string
};
var _default = Icon;
exports["default"] = _default;